name: Deploy to Azure

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: environment to deploy to
        required: true
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read
jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'staging' }}
    outputs:
      image_tag: ${{ steps.vars.outputs.sha_short }}
    steps:
      - name: "Az CLI login"
        uses: azure/login@v2.1.0
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Azure Docker Login
        id: acr_login
        uses: Azure/cli@v2.0.0
        with:
          inlineScript: |
            {
              echo "docker_token<<EOF"
              echo "$(az acr login -n ${{vars.REGISTRY_NAME}} --expose-token --output tsv --query accessToken)"
              echo "EOF"
            } >> $GITHUB_OUTPUT
      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{vars.REGISTRY_NAME}}.azurecr.io
          username: 00000000-0000-0000-0000-000000000000
          password: ${{ steps.acr_login.outputs.docker_token }}

      - name: Set job env
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push Docker images
        uses: docker/build-push-action@v5.1.0
        with:
          push: true
          tags: ${{vars.REGISTRY_NAME}}.azurecr.io/${{vars.APP_NAME}}:${{ steps.vars.outputs.sha_short }}, ${{vars.REGISTRY_NAME}}.azurecr.io/${{vars.APP_NAME}}:${{ vars.ENVIRONMENT_NAME }}
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ inputs.environment || 'staging' }}
    steps:
      - name: "Az CLI login"
        uses: azure/login@v2.1.0
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      - name: Deploy built image to the toy robot
        uses: Azure/container-apps-deploy-action@v1
        with:
          acrName: ${{vars.REGISTRY_NAME}}
          containerAppName: ${{vars.CONTAINER_APP_NAME}}
          resourceGroup: ${{vars.RESOURCE_GROUP}}
          containerAppEnvironment: ${{vars.CONTAINER_APP_ENV}}
          imageToDeploy: ${{vars.REGISTRY_NAME}}.azurecr.io/${{vars.APP_NAME}}:${{ needs.build.outputs.image_tag }}
